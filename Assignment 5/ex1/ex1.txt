(i)
Case 1: k < x.key
We just call the function decrease_key, and the amortized time is O(1).
Case 2: k = x.key
We just ignore this case, the amortized time is O(1).
Case 3: k > x.key
We delete the node x, and then insert x again with the new key k. The amortized time is O(logn).
(ii)
Suppose that we also had an additional cost to the potential function that was proportional to the size of the structure. This would only increase when we do an insertion, and then only by a constant amount, so there aren't any worries concerning this increased potential function raising the amortized cost of any operations. Once we've made this modification, to the potential function, we also modify the heap itself by having a doubly linked list along all of the leaf nodes in the heap.
To prune we then pick any leaf node, remove it from its parent's child list, and remove it from the list of leaves. We repeat this min‚Å°(r,H.n) times. This causes the potential to drop by an amount proportional to r which is on the order of the actual cost of what just happened since the deletions from the linked list take only constant amounts of time each. So, the amortized time is constant.